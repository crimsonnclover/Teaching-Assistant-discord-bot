import asyncio

import discord
from discord.ui import Button, View

import scheduler
import utils
from event import Event
from styles import (InfoModal, QuestionModal, green_embed, orange_embed, red_embed)


# the main view class, which describes all interaction on the /start command. 
class StartView(View): 
    # initialization of StartView class. Every /start call is an object of this class
    def __init__(self, root_channel, bot, timeout: float | None = 180): 
        super().__init__(timeout=timeout)
        self.root_channel = root_channel # channel of /start call
        self.bot = bot # bot of /start call
        self.event = Event() # Event object, question/information scheduled in /start call

        # buttons and button callbacks initialization
        self.schedule_question_button = Button(
            custom_id="schedule_question",
            label="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            style=discord.ButtonStyle.green,
        )
        self.schedule_question_button.callback = self.schedule_question_button_callback

        self.schedule_info_button = Button(
            custom_id="schedule_info",
            label="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
            style=discord.ButtonStyle.green,
        )
        self.schedule_info_button.callback = self.schedule_info_button_callback

        self.list_button = Button(
            custom_id="list",
            label="–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
            style=discord.ButtonStyle.green,
        )
        self.list_button.callback = self.list_button_callback

        self.delete_button = Button(
            custom_id="delete",
            label="–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ",
            style=discord.ButtonStyle.green,
        )
        self.delete_button.callback = self.delete_button_callback

        self.exit_button = Button(   
            custom_id="exit",
            label="–í—ã—Ö–æ–¥",
            style=discord.ButtonStyle.green,
        )
        self.exit_button.callback = self.exit_button_callback

        self.add_item(self.schedule_question_button)
        self.add_item(self.schedule_info_button)
        self.add_item(self.list_button)
        self.add_item(self.delete_button)
        self.add_item(self.exit_button)


    # function for deactivate buttons after interactions with ones
    def deactivate_buttons(self):
        self.schedule_question_button.disabled = True
        self.schedule_info_button.disabled = True
        self.list_button.disabled = True
        self.delete_button.disabled = True
        self.exit_button.disabled = True


    # function that gets requared channel name
    async def get_channel(self, interaction):
        original_mg = interaction.message
        self.deactivate_buttons()
        await original_mg.edit(view=self)

        await self.root_channel.send(embed=orange_embed("üì∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª!", "–í–ø–∏—à–∏—Ç–µ # –∏ –≤—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª."))
        msg = await self.bot.wait_for("message")
        choosen_channel = utils.get_channel(msg.content)
        self.event.channel = choosen_channel


    # function that gets requared datetime
    async def get_datetime(self):
        await self.root_channel.send(embed=orange_embed("üïê –ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", "–§–æ—Ä–º–∞—Ç dd/mm/yy HH:MM, –±–µ–∑ —Å–µ–∫—É–Ω–¥"))
        msg = await self.bot.wait_for("message")
        recieved_data = utils.get_datetime(msg.content)
        self.event.dt = recieved_data


    async def schedule_question_button_callback(self, interaction: discord.Interaction):

        async def modal_on_submit(modal_interaction):
            self.event.id = modal_interaction.data["custom_id"][:10]
            self.event.guild = modal_interaction.guild_id
            self.event.type = "question"
            self.event.header = modal_interaction.data["components"][0]["components"][0]["value"]
            for i in range(1, 5):
                ans = modal_interaction.data["components"][i]["components"][0]["value"]
                if ans != "":
                    self.event.body.append(ans)
            await modal_interaction.response.send_message(embed=green_embed("‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"))

            await self.get_channel(interaction)
            while self.event.channel is None:
                await self.root_channel.send(embed=red_embed("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª!", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
                await self.get_channel(interaction)

            await self.get_datetime()
            while self.event.dt is None:
                await self.root_channel.send(embed=red_embed("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è!", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
                await self.get_datetime()

            self.bot.events_heap.push(self.event)
            scheduler.db_append(self.event)
            await self.root_channel.send(embed=green_embed("‚úÖ –í–æ–ø—Ä–æ—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!"))

        qm = QuestionModal()
        qm.on_submit = modal_on_submit
        await interaction.response.send_modal(qm)


    async def schedule_info_button_callback(self, interaction: discord.Interaction):

        async def modal_on_submit(modal_interaction):
            self.event.id = modal_interaction.data["custom_id"][:10]
            self.event.guild = modal_interaction.guild_id
            self.event.type = "info"
            self.event.header = modal_interaction.data["components"][0]["components"][0]["value"]
            self.event.body.append(modal_interaction.data["components"][1]["components"][0]["value"])
            await modal_interaction.response.send_message(embed=green_embed("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"))

            await self.get_channel(interaction)
            while self.event.channel is None:
                await self.root_channel.send(embed=red_embed("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª!", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
                await self.get_channel(interaction)
            
            await self.get_datetime()
            while self.event.dt is None:
                await self.root_channel.send(embed=red_embed("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è!", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
                await self.get_datetime()

            self.bot.events_heap.push(self.event)
            scheduler.db_append(self.event)
            await self.root_channel.send(embed=green_embed("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!"))

        im = InfoModal()
        im.on_submit = modal_on_submit
        await interaction.response.send_modal(im)


    async def list_button_callback(self, interaction: discord.Interaction):
        await self.get_channel(interaction)
        while self.event.channel is None:
            await self.root_channel.send(embed=red_embed("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è!", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
            await self.get_channel(interaction)

        events_list = scheduler.db_get_by_channel(self.event.channel)
        if not len(events_list):
            await self.root_channel.send(embed=orange_embed("‚ùï –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"))
        else:
            desc = []
            for event in events_list:
                desc.append(event[3] + ": " + event[4][:max(len(event[4]), 30)] + " " + event[6])
            await self.root_channel.send(embed=orange_embed("üì∞ –°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ:",
                                                                        "\n".join(desc)))


    async def delete_button_callback(self, interaction: discord.Interaction):
        await self.get_channel(interaction)
        while self.event.channel is None:
            await self.root_channel.send(embed=red_embed("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è!", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
            await self.get_channel(interaction)

        events_list = scheduler.db_get_by_channel(self.event.channel)
        if not len(events_list):
            await self.root_channel.send(embed=orange_embed("‚ùï –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"))
        else:
            desc = []
            for event in events_list:
                desc.append("id " + event[0] + ": " + event[4][:max(len(event[4]), 30)] + " " + event[6])
            await self.root_channel.send(embed=orange_embed("üì∞ –°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ id —Ç–æ–≥–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
                                                             "\n".join(desc)))
            id = await self.bot.wait_for("message")
            scheduler.db_remove_by_id(id.content)
            self.bot.events_heap.remove(id.content)
            await self.root_channel.send(embed=green_embed("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!"))


    async def exit_button_callback(self, interaction: discord.Interaction):
        self.deactivate_buttons()
        await interaction.response.edit_message(view=self)
 